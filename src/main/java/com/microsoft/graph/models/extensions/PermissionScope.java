// ------------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

package com.microsoft.graph.models.extensions;
import com.microsoft.graph.concurrency.*;
import com.microsoft.graph.core.*;
import com.microsoft.graph.http.*;
import com.microsoft.graph.options.*;
import com.microsoft.graph.serializer.*;
import java.util.Arrays;
import java.util.EnumSet;


import com.google.gson.JsonObject;
import com.google.gson.JsonElement;
import com.google.gson.annotations.*;
import java.util.HashMap;
import java.util.Map;

// **NOTE** This file was generated by a tool and any changes will be overwritten.

/**
 * The class for the Permission Scope.
 */
public class PermissionScope implements IJsonBackedObject {

    @SerializedName("@odata.type")
    @Expose
    public String oDataType;

    private transient AdditionalDataManager additionalDataManager = new AdditionalDataManager(this);

    @Override
    public final AdditionalDataManager additionalDataManager() {
        return additionalDataManager;
    }

    /**
     * The Admin Consent Description.
     * Permission help text that appears in the admin consent and app assignment experiences.
     */
    @SerializedName("adminConsentDescription")
    @Expose
    public String adminConsentDescription;

    /**
     * The Admin Consent Display Name.
     * Display name for the permission that appears in the admin consent and app assignment experiences.
     */
    @SerializedName("adminConsentDisplayName")
    @Expose
    public String adminConsentDisplayName;

    /**
     * The Id.
     * Unique scope permission identifier inside the oauth2Permissions collection.
     */
    @SerializedName("id")
    @Expose
    public java.util.UUID id;

    /**
     * The Is Enabled.
     * When creating or updating a permission, this property must be set to true (which is the default). To delete a permission, this property must first be set to false. At that point, in a subsequent call, the permission may be removed.
     */
    @SerializedName("isEnabled")
    @Expose
    public Boolean isEnabled;

    /**
     * The Origin.
     * For internal use.
     */
    @SerializedName("origin")
    @Expose
    public String origin;

    /**
     * The Type.
     * Specifies whether this scope permission can be consented to by an end user, or whether it is a tenant-wide permission that must be consented to by a company administrator. Possible values are User or Admin.
     */
    @SerializedName("type")
    @Expose
    public String type;

    /**
     * The User Consent Description.
     * Permission help text that appears in the end-user consent experience.
     */
    @SerializedName("userConsentDescription")
    @Expose
    public String userConsentDescription;

    /**
     * The User Consent Display Name.
     * Display name for the permission that appears in the end-user consent experience.
     */
    @SerializedName("userConsentDisplayName")
    @Expose
    public String userConsentDisplayName;

    /**
     * The Value.
     * The value of the scope claim that the resource application should expect in the OAuth 2.0 access token.
     */
    @SerializedName("value")
    @Expose
    public String value;


    /**
     * The raw representation of this class
     */
    private JsonObject rawObject;

    /**
     * The serializer
     */
    private ISerializer serializer;

    /**
     * Gets the raw representation of this class
     *
     * @return the raw representation of this class
     */
    public JsonObject getRawObject() {
        return rawObject;
    }

    /**
     * Gets serializer
     *
     * @return the serializer
     */
    protected ISerializer getSerializer() {
        return serializer;
    }

    /**
     * Sets the raw JSON object
     *
     * @param serializer the serializer
     * @param json the JSON object to set this object to
     */
    public void setRawObject(final ISerializer serializer, final JsonObject json) {
        this.serializer = serializer;
        rawObject = json;

    }
}
